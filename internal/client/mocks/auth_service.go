// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

package clientmocks

//go:generate minimock -i github.com/passsquale/chat-server/internal/client.AuthService -o auth_service.go -n AuthServiceMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/passsquale/chat-server/internal/model"
	"github.com/gojuno/minimock/v3"
)

// AuthServiceMock implements client.AuthService
type AuthServiceMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCheck          func(ctx context.Context, role ...model.UserRole) (err error)
	inspectFuncCheck   func(ctx context.Context, role ...model.UserRole)
	afterCheckCounter  uint64
	beforeCheckCounter uint64
	CheckMock          mAuthServiceMockCheck
}

// NewAuthServiceMock returns a mock for client.AuthService
func NewAuthServiceMock(t minimock.Tester) *AuthServiceMock {
	m := &AuthServiceMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CheckMock = mAuthServiceMockCheck{mock: m}
	m.CheckMock.callArgs = []*AuthServiceMockCheckParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mAuthServiceMockCheck struct {
	mock               *AuthServiceMock
	defaultExpectation *AuthServiceMockCheckExpectation
	expectations       []*AuthServiceMockCheckExpectation

	callArgs []*AuthServiceMockCheckParams
	mutex    sync.RWMutex
}

// AuthServiceMockCheckExpectation specifies expectation struct of the AuthService.Check
type AuthServiceMockCheckExpectation struct {
	mock    *AuthServiceMock
	params  *AuthServiceMockCheckParams
	results *AuthServiceMockCheckResults
	Counter uint64
}

// AuthServiceMockCheckParams contains parameters of the AuthService.Check
type AuthServiceMockCheckParams struct {
	ctx  context.Context
	role []model.UserRole
}

// AuthServiceMockCheckResults contains results of the AuthService.Check
type AuthServiceMockCheckResults struct {
	err error
}

// Expect sets up expected params for AuthService.Check
func (mmCheck *mAuthServiceMockCheck) Expect(ctx context.Context, role ...model.UserRole) *mAuthServiceMockCheck {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("AuthServiceMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &AuthServiceMockCheckExpectation{}
	}

	mmCheck.defaultExpectation.params = &AuthServiceMockCheckParams{ctx, role}
	for _, e := range mmCheck.expectations {
		if minimock.Equal(e.params, mmCheck.defaultExpectation.params) {
			mmCheck.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCheck.defaultExpectation.params)
		}
	}

	return mmCheck
}

// Inspect accepts an inspector function that has same arguments as the AuthService.Check
func (mmCheck *mAuthServiceMockCheck) Inspect(f func(ctx context.Context, role ...model.UserRole)) *mAuthServiceMockCheck {
	if mmCheck.mock.inspectFuncCheck != nil {
		mmCheck.mock.t.Fatalf("Inspect function is already set for AuthServiceMock.Check")
	}

	mmCheck.mock.inspectFuncCheck = f

	return mmCheck
}

// Return sets up results that will be returned by AuthService.Check
func (mmCheck *mAuthServiceMockCheck) Return(err error) *AuthServiceMock {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("AuthServiceMock.Check mock is already set by Set")
	}

	if mmCheck.defaultExpectation == nil {
		mmCheck.defaultExpectation = &AuthServiceMockCheckExpectation{mock: mmCheck.mock}
	}
	mmCheck.defaultExpectation.results = &AuthServiceMockCheckResults{err}
	return mmCheck.mock
}

// Set uses given function f to mock the AuthService.Check method
func (mmCheck *mAuthServiceMockCheck) Set(f func(ctx context.Context, role ...model.UserRole) (err error)) *AuthServiceMock {
	if mmCheck.defaultExpectation != nil {
		mmCheck.mock.t.Fatalf("Default expectation is already set for the AuthService.Check method")
	}

	if len(mmCheck.expectations) > 0 {
		mmCheck.mock.t.Fatalf("Some expectations are already set for the AuthService.Check method")
	}

	mmCheck.mock.funcCheck = f
	return mmCheck.mock
}

// When sets expectation for the AuthService.Check which will trigger the result defined by the following
// Then helper
func (mmCheck *mAuthServiceMockCheck) When(ctx context.Context, role ...model.UserRole) *AuthServiceMockCheckExpectation {
	if mmCheck.mock.funcCheck != nil {
		mmCheck.mock.t.Fatalf("AuthServiceMock.Check mock is already set by Set")
	}

	expectation := &AuthServiceMockCheckExpectation{
		mock:   mmCheck.mock,
		params: &AuthServiceMockCheckParams{ctx, role},
	}
	mmCheck.expectations = append(mmCheck.expectations, expectation)
	return expectation
}

// Then sets up AuthService.Check return parameters for the expectation previously defined by the When method
func (e *AuthServiceMockCheckExpectation) Then(err error) *AuthServiceMock {
	e.results = &AuthServiceMockCheckResults{err}
	return e.mock
}

// Check implements client.AuthService
func (mmCheck *AuthServiceMock) Check(ctx context.Context, role ...model.UserRole) (err error) {
	mm_atomic.AddUint64(&mmCheck.beforeCheckCounter, 1)
	defer mm_atomic.AddUint64(&mmCheck.afterCheckCounter, 1)

	if mmCheck.inspectFuncCheck != nil {
		mmCheck.inspectFuncCheck(ctx, role...)
	}

	mm_params := AuthServiceMockCheckParams{ctx, role}

	// Record call args
	mmCheck.CheckMock.mutex.Lock()
	mmCheck.CheckMock.callArgs = append(mmCheck.CheckMock.callArgs, &mm_params)
	mmCheck.CheckMock.mutex.Unlock()

	for _, e := range mmCheck.CheckMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCheck.CheckMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCheck.CheckMock.defaultExpectation.Counter, 1)
		mm_want := mmCheck.CheckMock.defaultExpectation.params
		mm_got := AuthServiceMockCheckParams{ctx, role}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCheck.t.Errorf("AuthServiceMock.Check got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCheck.CheckMock.defaultExpectation.results
		if mm_results == nil {
			mmCheck.t.Fatal("No results are set for the AuthServiceMock.Check")
		}
		return (*mm_results).err
	}
	if mmCheck.funcCheck != nil {
		return mmCheck.funcCheck(ctx, role...)
	}
	mmCheck.t.Fatalf("Unexpected call to AuthServiceMock.Check. %v %v", ctx, role)
	return
}

// CheckAfterCounter returns a count of finished AuthServiceMock.Check invocations
func (mmCheck *AuthServiceMock) CheckAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheck.afterCheckCounter)
}

// CheckBeforeCounter returns a count of AuthServiceMock.Check invocations
func (mmCheck *AuthServiceMock) CheckBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCheck.beforeCheckCounter)
}

// Calls returns a list of arguments used in each call to AuthServiceMock.Check.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCheck *mAuthServiceMockCheck) Calls() []*AuthServiceMockCheckParams {
	mmCheck.mutex.RLock()

	argCopy := make([]*AuthServiceMockCheckParams, len(mmCheck.callArgs))
	copy(argCopy, mmCheck.callArgs)

	mmCheck.mutex.RUnlock()

	return argCopy
}

// MinimockCheckDone returns true if the count of the Check invocations corresponds
// the number of defined expectations
func (m *AuthServiceMock) MinimockCheckDone() bool {
	for _, e := range m.CheckMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheck != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		return false
	}
	return true
}

// MinimockCheckInspect logs each unmet expectation
func (m *AuthServiceMock) MinimockCheckInspect() {
	for _, e := range m.CheckMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to AuthServiceMock.Check with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CheckMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		if m.CheckMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to AuthServiceMock.Check")
		} else {
			m.t.Errorf("Expected call to AuthServiceMock.Check with params: %#v", *m.CheckMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCheck != nil && mm_atomic.LoadUint64(&m.afterCheckCounter) < 1 {
		m.t.Error("Expected call to AuthServiceMock.Check")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *AuthServiceMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCheckInspect()
			m.t.FailNow()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *AuthServiceMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *AuthServiceMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCheckDone()
}
